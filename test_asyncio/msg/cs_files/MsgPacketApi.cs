// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg_packet_api.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Msg {

  /// <summary>Holder for reflection information generated from msg_packet_api.proto</summary>
  public static partial class MsgPacketApiReflection {

    #region Descriptor
    /// <summary>File descriptor for msg_packet_api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgPacketApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRtc2dfcGFja2V0X2FwaS5wcm90bxIDbXNnGg5tc2dfZW51bS5wcm90bxoP",
            "bXNnX2Vycm9yLnByb3RvGhBtc2dfc3RydWN0LnByb3RvIj4KCnJlcV9wYWNr",
            "ZXQSEgoKYXV0aF90b2tlbhgBIAEoCRIPCgdjaGFyX2lkGAIgASgDEgsKA21z",
            "ZxgDIAEoDCI6CgphY2tfcGFja2V0Eh8KCGVycl9jb2RlGAEgASgOMg0ubXNn",
            "LmVycl90eXBlEgsKA21zZxgCIAEoDCJVCglsb2dpbl9yZXESDwoHdXNlcl9p",
            "ZBgBIAEoCRIQCghwYXNzd29yZBgCIAEoCRIlCglwbGF0X3R5cGUYAyABKA4y",
            "Ei5tc2cucGxhdGZvcm1fdHlwZSIfCglsb2dpbl9hY2sSEgoKYXV0aF90b2tl",
            "bhgBIAEoCSITChFnZXRfY2hhcl9saXN0X3JlcSI2ChFnZXRfY2hhcl9saXN0",
            "X2FjaxIhCgljaGFyX2xpc3QYASADKAsyDi5tc2cuY2hhcl9pbmZvIjYKD2Ny",
            "ZWF0ZV9jaGFyX3JlcRIRCgljaGFyX25hbWUYASABKAkSEAoIY2hhcl9taWQY",
            "AiABKAUiQwoPY3JlYXRlX2NoYXJfYWNrEhwKBGNoYXIYASABKAsyDi5tc2cu",
            "Y2hhcl9pbmZvEhIKCmF1dGhfdG9rZW4YAiABKAkiIwoPZGVsZXRlX2NoYXJf",
            "cmVxEhAKCGNoYXJfaWR4GAEgASgDIiUKD2RlbGV0ZV9jaGFyX2FjaxISCgph",
            "dXRoX3Rva2VuGAEgASgJIiMKD3NlbGVjdF9jaGFyX3JlcRIQCghjaGFyX2lk",
            "eBgBIAEoAyIRCg9zZWxlY3RfY2hhcl9hY2tiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Msg.MsgEnumReflection.Descriptor, global::Msg.MsgErrorReflection.Descriptor, global::Msg.MsgStructReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.req_packet), global::Msg.req_packet.Parser, new[]{ "AuthToken", "CharId", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.ack_packet), global::Msg.ack_packet.Parser, new[]{ "ErrCode", "Msg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.login_req), global::Msg.login_req.Parser, new[]{ "UserId", "Password", "PlatType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.login_ack), global::Msg.login_ack.Parser, new[]{ "AuthToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.get_char_list_req), global::Msg.get_char_list_req.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.get_char_list_ack), global::Msg.get_char_list_ack.Parser, new[]{ "CharList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.create_char_req), global::Msg.create_char_req.Parser, new[]{ "CharName", "CharMid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.create_char_ack), global::Msg.create_char_ack.Parser, new[]{ "Char", "AuthToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.delete_char_req), global::Msg.delete_char_req.Parser, new[]{ "CharIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.delete_char_ack), global::Msg.delete_char_ack.Parser, new[]{ "AuthToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.select_char_req), global::Msg.select_char_req.Parser, new[]{ "CharIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Msg.select_char_ack), global::Msg.select_char_ack.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// base
  /// </summary>
  public sealed partial class req_packet : pb::IMessage<req_packet> {
    private static readonly pb::MessageParser<req_packet> _parser = new pb::MessageParser<req_packet>(() => new req_packet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<req_packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public req_packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public req_packet(req_packet other) : this() {
      authToken_ = other.authToken_;
      charId_ = other.charId_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public req_packet Clone() {
      return new req_packet(this);
    }

    /// <summary>Field number for the "auth_token" field.</summary>
    public const int AuthTokenFieldNumber = 1;
    private string authToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthToken {
      get { return authToken_; }
      set {
        authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "char_id" field.</summary>
    public const int CharIdFieldNumber = 2;
    private long charId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CharId {
      get { return charId_; }
      set {
        charId_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 3;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as req_packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(req_packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthToken != other.AuthToken) return false;
      if (CharId != other.CharId) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthToken.Length != 0) hash ^= AuthToken.GetHashCode();
      if (CharId != 0L) hash ^= CharId.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuthToken);
      }
      if (CharId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CharId);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
      }
      if (CharId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharId);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(req_packet other) {
      if (other == null) {
        return;
      }
      if (other.AuthToken.Length != 0) {
        AuthToken = other.AuthToken;
      }
      if (other.CharId != 0L) {
        CharId = other.CharId;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AuthToken = input.ReadString();
            break;
          }
          case 16: {
            CharId = input.ReadInt64();
            break;
          }
          case 26: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ack_packet : pb::IMessage<ack_packet> {
    private static readonly pb::MessageParser<ack_packet> _parser = new pb::MessageParser<ack_packet>(() => new ack_packet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ack_packet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ack_packet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ack_packet(ack_packet other) : this() {
      errCode_ = other.errCode_;
      msg_ = other.msg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ack_packet Clone() {
      return new ack_packet(this);
    }

    /// <summary>Field number for the "err_code" field.</summary>
    public const int ErrCodeFieldNumber = 1;
    private global::Msg.err_type errCode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.err_type ErrCode {
      get { return errCode_; }
      set {
        errCode_ = value;
      }
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 2;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ack_packet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ack_packet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ErrCode != other.ErrCode) return false;
      if (Msg != other.Msg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ErrCode != 0) hash ^= ErrCode.GetHashCode();
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrCode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ErrCode);
      }
      if (Msg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Msg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrCode);
      }
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ack_packet other) {
      if (other == null) {
        return;
      }
      if (other.ErrCode != 0) {
        ErrCode = other.ErrCode;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            errCode_ = (global::Msg.err_type) input.ReadEnum();
            break;
          }
          case 18: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// system
  /// </summary>
  public sealed partial class login_req : pb::IMessage<login_req> {
    private static readonly pb::MessageParser<login_req> _parser = new pb::MessageParser<login_req>(() => new login_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<login_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_req(login_req other) : this() {
      userId_ = other.userId_;
      password_ = other.password_;
      platType_ = other.platType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_req Clone() {
      return new login_req(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plat_type" field.</summary>
    public const int PlatTypeFieldNumber = 3;
    private global::Msg.platform_type platType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.platform_type PlatType {
      get { return platType_; }
      set {
        platType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as login_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(login_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Password != other.Password) return false;
      if (PlatType != other.PlatType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId.Length != 0) hash ^= UserId.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (PlatType != 0) hash ^= PlatType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (PlatType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PlatType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (PlatType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlatType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(login_req other) {
      if (other == null) {
        return;
      }
      if (other.UserId.Length != 0) {
        UserId = other.UserId;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.PlatType != 0) {
        PlatType = other.PlatType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 24: {
            platType_ = (global::Msg.platform_type) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class login_ack : pb::IMessage<login_ack> {
    private static readonly pb::MessageParser<login_ack> _parser = new pb::MessageParser<login_ack>(() => new login_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<login_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_ack(login_ack other) : this() {
      authToken_ = other.authToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public login_ack Clone() {
      return new login_ack(this);
    }

    /// <summary>Field number for the "auth_token" field.</summary>
    public const int AuthTokenFieldNumber = 1;
    private string authToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthToken {
      get { return authToken_; }
      set {
        authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as login_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(login_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthToken != other.AuthToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthToken.Length != 0) hash ^= AuthToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuthToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(login_ack other) {
      if (other == null) {
        return;
      }
      if (other.AuthToken.Length != 0) {
        AuthToken = other.AuthToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AuthToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// lobby
  /// </summary>
  public sealed partial class get_char_list_req : pb::IMessage<get_char_list_req> {
    private static readonly pb::MessageParser<get_char_list_req> _parser = new pb::MessageParser<get_char_list_req>(() => new get_char_list_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<get_char_list_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public get_char_list_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public get_char_list_req(get_char_list_req other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public get_char_list_req Clone() {
      return new get_char_list_req(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as get_char_list_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(get_char_list_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(get_char_list_req other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class get_char_list_ack : pb::IMessage<get_char_list_ack> {
    private static readonly pb::MessageParser<get_char_list_ack> _parser = new pb::MessageParser<get_char_list_ack>(() => new get_char_list_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<get_char_list_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public get_char_list_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public get_char_list_ack(get_char_list_ack other) : this() {
      charList_ = other.charList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public get_char_list_ack Clone() {
      return new get_char_list_ack(this);
    }

    /// <summary>Field number for the "char_list" field.</summary>
    public const int CharListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.char_info> _repeated_charList_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.char_info.Parser);
    private readonly pbc::RepeatedField<global::Msg.char_info> charList_ = new pbc::RepeatedField<global::Msg.char_info>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.char_info> CharList {
      get { return charList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as get_char_list_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(get_char_list_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!charList_.Equals(other.charList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= charList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      charList_.WriteTo(output, _repeated_charList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += charList_.CalculateSize(_repeated_charList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(get_char_list_ack other) {
      if (other == null) {
        return;
      }
      charList_.Add(other.charList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            charList_.AddEntriesFrom(input, _repeated_charList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class create_char_req : pb::IMessage<create_char_req> {
    private static readonly pb::MessageParser<create_char_req> _parser = new pb::MessageParser<create_char_req>(() => new create_char_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<create_char_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_char_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_char_req(create_char_req other) : this() {
      charName_ = other.charName_;
      charMid_ = other.charMid_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_char_req Clone() {
      return new create_char_req(this);
    }

    /// <summary>Field number for the "char_name" field.</summary>
    public const int CharNameFieldNumber = 1;
    private string charName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CharName {
      get { return charName_; }
      set {
        charName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "char_mid" field.</summary>
    public const int CharMidFieldNumber = 2;
    private int charMid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CharMid {
      get { return charMid_; }
      set {
        charMid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as create_char_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(create_char_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharName != other.CharName) return false;
      if (CharMid != other.CharMid) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharName.Length != 0) hash ^= CharName.GetHashCode();
      if (CharMid != 0) hash ^= CharMid.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CharName);
      }
      if (CharMid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(CharMid);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CharName);
      }
      if (CharMid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharMid);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(create_char_req other) {
      if (other == null) {
        return;
      }
      if (other.CharName.Length != 0) {
        CharName = other.CharName;
      }
      if (other.CharMid != 0) {
        CharMid = other.CharMid;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CharName = input.ReadString();
            break;
          }
          case 16: {
            CharMid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class create_char_ack : pb::IMessage<create_char_ack> {
    private static readonly pb::MessageParser<create_char_ack> _parser = new pb::MessageParser<create_char_ack>(() => new create_char_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<create_char_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_char_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_char_ack(create_char_ack other) : this() {
      Char = other.char_ != null ? other.Char.Clone() : null;
      authToken_ = other.authToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public create_char_ack Clone() {
      return new create_char_ack(this);
    }

    /// <summary>Field number for the "char" field.</summary>
    public const int CharFieldNumber = 1;
    private global::Msg.char_info char_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.char_info Char {
      get { return char_; }
      set {
        char_ = value;
      }
    }

    /// <summary>Field number for the "auth_token" field.</summary>
    public const int AuthTokenFieldNumber = 2;
    private string authToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthToken {
      get { return authToken_; }
      set {
        authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as create_char_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(create_char_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Char, other.Char)) return false;
      if (AuthToken != other.AuthToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (char_ != null) hash ^= Char.GetHashCode();
      if (AuthToken.Length != 0) hash ^= AuthToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (char_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Char);
      }
      if (AuthToken.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AuthToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (char_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Char);
      }
      if (AuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(create_char_ack other) {
      if (other == null) {
        return;
      }
      if (other.char_ != null) {
        if (char_ == null) {
          char_ = new global::Msg.char_info();
        }
        Char.MergeFrom(other.Char);
      }
      if (other.AuthToken.Length != 0) {
        AuthToken = other.AuthToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (char_ == null) {
              char_ = new global::Msg.char_info();
            }
            input.ReadMessage(char_);
            break;
          }
          case 18: {
            AuthToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class delete_char_req : pb::IMessage<delete_char_req> {
    private static readonly pb::MessageParser<delete_char_req> _parser = new pb::MessageParser<delete_char_req>(() => new delete_char_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<delete_char_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public delete_char_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public delete_char_req(delete_char_req other) : this() {
      charIdx_ = other.charIdx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public delete_char_req Clone() {
      return new delete_char_req(this);
    }

    /// <summary>Field number for the "char_idx" field.</summary>
    public const int CharIdxFieldNumber = 1;
    private long charIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CharIdx {
      get { return charIdx_; }
      set {
        charIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as delete_char_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(delete_char_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharIdx != other.CharIdx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharIdx != 0L) hash ^= CharIdx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharIdx != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CharIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharIdx != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(delete_char_req other) {
      if (other == null) {
        return;
      }
      if (other.CharIdx != 0L) {
        CharIdx = other.CharIdx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharIdx = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class delete_char_ack : pb::IMessage<delete_char_ack> {
    private static readonly pb::MessageParser<delete_char_ack> _parser = new pb::MessageParser<delete_char_ack>(() => new delete_char_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<delete_char_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public delete_char_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public delete_char_ack(delete_char_ack other) : this() {
      authToken_ = other.authToken_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public delete_char_ack Clone() {
      return new delete_char_ack(this);
    }

    /// <summary>Field number for the "auth_token" field.</summary>
    public const int AuthTokenFieldNumber = 1;
    private string authToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthToken {
      get { return authToken_; }
      set {
        authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as delete_char_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(delete_char_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AuthToken != other.AuthToken) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AuthToken.Length != 0) hash ^= AuthToken.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AuthToken.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AuthToken);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(delete_char_ack other) {
      if (other == null) {
        return;
      }
      if (other.AuthToken.Length != 0) {
        AuthToken = other.AuthToken;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AuthToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class select_char_req : pb::IMessage<select_char_req> {
    private static readonly pb::MessageParser<select_char_req> _parser = new pb::MessageParser<select_char_req>(() => new select_char_req());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<select_char_req> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public select_char_req() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public select_char_req(select_char_req other) : this() {
      charIdx_ = other.charIdx_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public select_char_req Clone() {
      return new select_char_req(this);
    }

    /// <summary>Field number for the "char_idx" field.</summary>
    public const int CharIdxFieldNumber = 1;
    private long charIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CharIdx {
      get { return charIdx_; }
      set {
        charIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as select_char_req);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(select_char_req other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CharIdx != other.CharIdx) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CharIdx != 0L) hash ^= CharIdx.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CharIdx != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CharIdx);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CharIdx != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharIdx);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(select_char_req other) {
      if (other == null) {
        return;
      }
      if (other.CharIdx != 0L) {
        CharIdx = other.CharIdx;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharIdx = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class select_char_ack : pb::IMessage<select_char_ack> {
    private static readonly pb::MessageParser<select_char_ack> _parser = new pb::MessageParser<select_char_ack>(() => new select_char_ack());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<select_char_ack> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Msg.MsgPacketApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public select_char_ack() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public select_char_ack(select_char_ack other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public select_char_ack Clone() {
      return new select_char_ack(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as select_char_ack);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(select_char_ack other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(select_char_ack other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
